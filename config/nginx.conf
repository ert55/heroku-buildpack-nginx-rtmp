daemon off;
env PATH;
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

rtmp {

        server {

            listen 1935;

            chunk_size 4000;

            # TV mode: one publisher, many subscribers
			
            application live {

                # enable live streaming
				live on;
				record off;
				allow publish 127.0.0.1;
				allow publish 0.0.0.0;
				deny publish all;
				exec_options on;
                # record first 1K of stream
                #record all;
                #record_path /tmp/av;
                #record_max_size 1K;

                # append current timestamp to each flv
                #record_unique on;

                # publish only from localhost
                #allow publish 127.0.0.1;
                #deny publish all;

                allow play all;
				exec_pull ffmpeg -loglevel quiet -rtsp_transport tcp -i rtsp://test1:test1@188.0.32.166:9094/live/mpeg4_ulaw/HD720P -map 0:0 -map 0:1 -r 25 -vsync -1 -profile:v baseline -tune zerolatency -c:v libx264 -preset veryfast -crf 22 -maxrate 2500k -bufsize 4000k -c:a aac -vbr 3 -sc_threshold 0 -g 25 -keyint_min 25 -f flv rtmp://localhost:1935/high/$name -map 0:0 -map 0:1 -r 25 -vsync -1 -profile:v baseline -tune zerolatency -c:v libx264 -preset veryfast -crf 22 -vf scale=-2:360 -maxrate 900k -bufsize 1200k -c:a aac -vbr 3 -sc_threshold 0 -g 25 -keyint_min 25 -f flv rtmp://localhost:1935/low/$name;								
            }
            application low {
                    live on;
                    record off;
					 allow play all;
                    allow publish 127.0.0.1;
                    allow publish 0.0.0.0;
                    deny publish all;
			}
            application high {
                    live on;
                    record off;
					 allow play all;
                    allow publish 127.0.0.1;
                    allow publish 0.0.0.0;
					deny publish all;
			}		

	  }
}

http {
        gzip on;
        gzip_comp_level 2;
        gzip_min_length 512;

	server_tokens off;

	log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
	access_log logs/nginx/access.log l2met;
	error_log logs/nginx/error.log;

	include mime.types;
	default_type application/octet-stream;
	sendfile on;

	#Must read the body in 5 seconds.
	client_body_timeout 5;

	# upstream app_server {
		# server unix:/tmp/nginx.socket fail_timeout=0;
 	# }

	# server {
		# listen <%= ENV["PORT"] %>;
		# server_name _;
		# keepalive_timeout 5;

		# location / {
			# proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			# proxy_set_header Host $http_host;
			# proxy_redirect off;
			# proxy_pass http://app_server;
		# }
	# }
}